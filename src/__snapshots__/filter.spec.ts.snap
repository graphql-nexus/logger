// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse !a 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": true,
      "originalInput": "!a",
      "path": Object {
        "descendents": false,
        "value": "a",
      },
    },
  },
]
`;

exports[`parse * 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "*",
      "path": Object {
        "descendents": Object {
          "includeParent": false,
        },
        "value": "",
      },
    },
  },
]
`;

exports[`parse *@* 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "eq",
        "value": "*",
      },
      "negate": false,
      "originalInput": "*@*",
      "path": Object {
        "descendents": Object {
          "includeParent": false,
        },
        "value": "",
      },
    },
  },
]
`;

exports[`parse *@1 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "eq",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "*@1",
      "path": Object {
        "descendents": Object {
          "includeParent": false,
        },
        "value": "",
      },
    },
  },
]
`;

exports[`parse , ,  a, 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "a",
      "path": Object {
        "descendents": false,
        "value": "a",
      },
    },
  },
]
`;

exports[`parse ,,a,b 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "a",
      "path": Object {
        "descendents": false,
        "value": "a",
      },
    },
  },
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "b",
      "path": Object {
        "descendents": false,
        "value": "b",
      },
    },
  },
]
`;

exports[`parse a 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "a",
      "path": Object {
        "descendents": false,
        "value": "a",
      },
    },
  },
]
`;

exports[`parse a,b 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "a",
      "path": Object {
        "descendents": false,
        "value": "a",
      },
    },
  },
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "b",
      "path": Object {
        "descendents": false,
        "value": "b",
      },
    },
  },
]
`;

exports[`parse a:b 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "a:b",
      "path": Object {
        "descendents": false,
        "value": "a:b",
      },
    },
  },
]
`;

exports[`parse app* 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "gte",
        "value": "trace",
      },
      "negate": false,
      "originalInput": "app*",
      "path": Object {
        "descendents": Object {
          "includeParent": true,
        },
        "value": "app",
      },
    },
  },
]
`;

exports[`parse app*@* 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "eq",
        "value": "*",
      },
      "negate": false,
      "originalInput": "app*@*",
      "path": Object {
        "descendents": Object {
          "includeParent": true,
        },
        "value": "app",
      },
    },
  },
]
`;

exports[`parse app*@1 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "eq",
        "value": "*",
      },
      "negate": false,
      "originalInput": "app*@*",
      "path": Object {
        "descendents": Object {
          "includeParent": true,
        },
        "value": "app",
      },
    },
  },
]
`;

exports[`parse app@* 1`] = `
Array [
  Object {
    "_tag": "Right",
    "right": Object {
      "level": Object {
        "comp": "eq",
        "value": "*",
      },
      "negate": false,
      "originalInput": "app@*",
      "path": Object {
        "descendents": false,
        "value": "app",
      },
    },
  },
]
`;

exports[`parse syntax errors ! 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "!". Hint: Must pass a path (e.g. "foo") or descendent matcher ("*")],
  },
]
`;

exports[`parse syntax errors ** 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "**".],
  },
]
`;

exports[`parse syntax errors *+ 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "*+".],
  },
]
`;

exports[`parse syntax errors *a 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "*a".],
  },
]
`;

exports[`parse syntax errors , 1`] = `Array []`;

exports[`parse syntax errors <empty> 1`] = `Array []`;

exports[`parse syntax errors @ 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "@".],
  },
]
`;

exports[`parse syntax errors a! 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "a!".],
  },
]
`;

exports[`parse syntax errors a+ 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "a+".],
  },
]
`;

exports[`parse syntax errors a@ 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "a@".],
  },
]
`;

exports[`parse syntax errors a@*! 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "a@*!".],
  },
]
`;

exports[`parse syntax errors a@*+ 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "a@*+".],
  },
]
`;

exports[`parse syntax errors a@*- 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "a@*-".],
  },
]
`;

exports[`parse syntax errors a@+* 1`] = `
Array [
  Object {
    "_tag": "Left",
    "left": [Error: Invalid filter pattern: "a@+*".],
  },
]
`;

exports[`processLogFilterInput renders log when invalid filter given renders sensitive to 1 pattern 1 error 1`] = `
Array [
  Array [
    "Your log filter's pattern was invalid: \\"!\\"

Log Filtering Syntax Manual
===========================

Grammar:

    [!](<path>|*)[@((<levelNum>|<levelLabel>)[+-]|*)][,<...>]

    <path>       = /^[A-z_]+[A-z_0-9]*$/
    <levelNum>   = 1     | 2     | 3    | 4    | 5     | 6
    <levelLabel> = trace | debug | info | warn | error | fatal

Examples:

    Paths:
    app         app path at default level
    app:router  app router path at default level

    Wildcards Paths:
    *           all paths at default level
    app:*       descendent paths of app at defualt level
    app*        app path and its descendent paths at defualt level

    Negate:
    !app        all paths expect app at default level 

    Lists:
    app,nexus   app and nexus paths at default level

    Levels:
    *@info      all paths at info level
    *@error-    all paths at error level or lower
    *@debug+    all paths at debug level or higher
    *@3         all paths at info level
    *@4-        all paths at error level or lower
    *@2+        all paths at debug level or higher

    Wildcard Paths:
    *@*         all paths at all levels

    Mixed:
    app@*       app path at all levels
    app:*@2+    descendent paths of app at debug level or higher
    app*@2-     app & descendent paths of app at debug level or lower  
  ",
  ],
]
`;

exports[`processLogFilterInput renders log when invalid filter given renders sensitive to n patterns <n errors 1`] = `
Array [
  Array [
    "2 of the patterns in your log filter were invalid:

    !
    3

Log Filtering Syntax Manual
===========================

Grammar:

    [!](<path>|*)[@((<levelNum>|<levelLabel>)[+-]|*)][,<...>]

    <path>       = /^[A-z_]+[A-z_0-9]*$/
    <levelNum>   = 1     | 2     | 3    | 4    | 5     | 6
    <levelLabel> = trace | debug | info | warn | error | fatal

Examples:

    Paths:
    app         app path at default level
    app:router  app router path at default level

    Wildcards Paths:
    *           all paths at default level
    app:*       descendent paths of app at defualt level
    app*        app path and its descendent paths at defualt level

    Negate:
    !app        all paths expect app at default level 

    Lists:
    app,nexus   app and nexus paths at default level

    Levels:
    *@info      all paths at info level
    *@error-    all paths at error level or lower
    *@debug+    all paths at debug level or higher
    *@3         all paths at info level
    *@4-        all paths at error level or lower
    *@2+        all paths at debug level or higher

    Wildcard Paths:
    *@*         all paths at all levels

    Mixed:
    app@*       app path at all levels
    app:*@2+    descendent paths of app at debug level or higher
    app*@2-     app & descendent paths of app at debug level or lower  
  ",
  ],
]
`;

exports[`processLogFilterInput renders log when invalid filter given renders sensitive to n patterns 1 error 1`] = `
Array [
  Array [
    "One of the patterns in your log filter was invalid: \\"!\\"

Log Filtering Syntax Manual
===========================

Grammar:

    [!](<path>|*)[@((<levelNum>|<levelLabel>)[+-]|*)][,<...>]

    <path>       = /^[A-z_]+[A-z_0-9]*$/
    <levelNum>   = 1     | 2     | 3    | 4    | 5     | 6
    <levelLabel> = trace | debug | info | warn | error | fatal

Examples:

    Paths:
    app         app path at default level
    app:router  app router path at default level

    Wildcards Paths:
    *           all paths at default level
    app:*       descendent paths of app at defualt level
    app*        app path and its descendent paths at defualt level

    Negate:
    !app        all paths expect app at default level 

    Lists:
    app,nexus   app and nexus paths at default level

    Levels:
    *@info      all paths at info level
    *@error-    all paths at error level or lower
    *@debug+    all paths at debug level or higher
    *@3         all paths at info level
    *@4-        all paths at error level or lower
    *@2+        all paths at debug level or higher

    Wildcard Paths:
    *@*         all paths at all levels

    Mixed:
    app@*       app path at all levels
    app:*@2+    descendent paths of app at debug level or higher
    app*@2-     app & descendent paths of app at debug level or lower  
  ",
  ],
]
`;
